{"version":3,"sources":["hooks/usePersistedState.js","utils/initData.js","hooks/useKeyPress.js","components/Todo.js","components/Area.js","components/Platform.js","utils/idgenerator.js","utils/drag.js","App.js","serviceWorker.js","index.js"],"names":["usePersistedState","key","defaultValue","React","useState","persistedState","localStorage","getItem","JSON","parse","state","setState","useEffect","window","setItem","stringify","initializeData","doArea","name","items","scheduleArea","delegateArea","eliminateArea","doneArea","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","upHandler","addEventListener","removeEventListener","Todo","props","data","areaKey","index","remove","change","isInputActive","setIsInputActive","text","inputValue","setInputValue","inputRef","useRef","enter","useKeypress","esc","onEnter","useCallback","onEsc","current","focus","handleInputChange","event","target","value","handleSave","handleEdit","id","draggableId","provided","snapshot","className","isDragging","ref","innerRef","draggableProps","dragHandleProps","onChange","onClick","Area","add","areaClassName","toLowerCase","todos","map","item","CSSTransition","classNames","timeout","exit","droppableId","isDraggingOver","droppableProps","TransitionGroup","component","placeholder","Platform","areas","setAreas","addTodo","newTodo","Math","random","toString","substr","area","console","log","push","newObj","removeTodo","splice","changeTodo","areaComponents","Object","entries","onDragEnd","result","columns","setColumns","destination","source","sourceColumn","destColumn","sourceItems","destItems","removed","column","copiedItems","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.006a6482.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction usePersistedState(key, defaultValue) {\r\n  const [state, setState] = React.useState(() => {\r\n    const persistedState = localStorage.getItem(key);\r\n    return persistedState ? JSON.parse(persistedState) : defaultValue;\r\n  });\r\n  React.useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state));\r\n  }, [state, key]);\r\n  return [state, setState];\r\n}\r\n\r\nexport default usePersistedState;","export const initializeData = () => ({\r\n  doArea: {\r\n      name: \"Do\",\r\n      items: []\r\n    },\r\n    scheduleArea: {\r\n      name: \"Schedule\",\r\n      items: []\r\n    },\r\n    delegateArea: {\r\n      name: \"Delegate\",\r\n      items: []\r\n    },\r\n    eliminateArea: {\r\n      name: \"Eliminate\",\r\n      items: []\r\n    },\r\n    doneArea: {\r\n      name: \"Done\",\r\n      items: []\r\n    }\r\n})","// From https://usehooks.com/useKeyPress/\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction useKeyPress(targetKey) {\r\n  // State for keeping track of whether key is pressed\r\n  const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n  // If pressed key is our target key then set to true\r\n  function downHandler({ key }) {\r\n    if (key === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  }\r\n\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key }) => {\r\n    if (key === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", downHandler);\r\n    window.addEventListener(\"keyup\", upHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", downHandler);\r\n      window.removeEventListener(\"keyup\", upHandler);\r\n    };\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return keyPressed;\r\n}\r\n\r\nexport default useKeyPress;\r\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { Edit, CheckSquare, XSquare } from 'react-feather';\r\nimport useKeypress from \"../hooks/useKeyPress\";\r\n\r\nimport './Todo.css'\r\n\r\nfunction Todo(props) {\r\n\r\n  // TODO: Don't render all the changes all the time\r\n  const { data, areaKey, index, remove, change } = props;\r\n\r\n  const [isInputActive, setIsInputActive] = useState(false);\r\n  const [inputValue, setInputValue] = useState(data.text);\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  const enter = useKeypress(\"Enter\");\r\n  const esc = useKeypress(\"Escape\");\r\n\r\n  const onEnter = useCallback(() => {\r\n    if (enter) {\r\n      change(areaKey, index, inputValue);\r\n      setIsInputActive(false);\r\n    }\r\n  }, [enter, inputValue, change]);\r\n\r\n  const onEsc = useCallback(() => {\r\n    if (esc) {\r\n      setInputValue(data.text);\r\n      setIsInputActive(false);\r\n    }\r\n  }, [esc, data.text]);\r\n\r\n  // focus the cursor when edit is active\r\n  useEffect(() => {\r\n    if (isInputActive) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isInputActive]);\r\n\r\n  useEffect(() => {\r\n    if (isInputActive) {\r\n      onEnter(); // save text changes \r\n      onEsc(); // revert text changes\r\n    }\r\n  }, [onEnter, onEsc, isInputActive]); // watch the Enter and Escape key presses\r\n\r\n  const handleInputChange = useCallback(\r\n    (event) => {\r\n      // TODO: Sanitize input\r\n      setInputValue(event.target.value);\r\n    },\r\n    [setInputValue]\r\n  );\r\n\r\n  const handleSave = () => {\r\n    change(areaKey, index, inputValue);\r\n    setIsInputActive(false);\r\n  }\r\n\r\n  const handleEdit = () => {\r\n    setIsInputActive(true);\r\n  }\r\n\r\n  return(\r\n    <Draggable key={data.id} draggableId={data.id} index={index}>\r\n      {(provided, snapshot) => \r\n        <div\r\n          className={`todo ${snapshot.isDragging ? \" active\" : \"\"} ${isInputActive ? \" active\": \"\"}`}\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <div className=\"text-section\">\r\n            { isInputActive ? \r\n              <textarea\r\n                className=\"text-input\"\r\n                ref={inputRef}\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n              />\r\n              :\r\n              <span className=\"text-input\">\r\n                {data.text}\r\n              </span>\r\n            }  \r\n          </div>\r\n          <div className=\"button-section\">\r\n            { isInputActive ?\r\n              <button className=\"action-button save-button\" onClick={handleSave}><CheckSquare/></button>\r\n            :\r\n              <button className=\"action-button edit-button\" onClick={handleEdit}><Edit/></button>\r\n            }\r\n            <button className=\"action-button remove-button\" onClick={() => remove(areaKey, index)}><XSquare /></button>\r\n          </div>\r\n        </div>\r\n      }\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { PlusSquare } from 'react-feather';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport Todo from './Todo';\r\n\r\nimport './Area.css'\r\n\r\nfunction Area(props) {\r\n  const { data, areaKey, add, remove, change } = props;\r\n  const areaClassName = data.name.toLowerCase(); \r\n\r\n  const todos = data.items.map((item, index) =>\r\n    <CSSTransition key={item.id} classNames=\"item\" timeout={300} exit={false}>\r\n      <Todo areaKey={areaKey} key={item.id} data={item} index={index} remove={remove} change={change}/>\r\n    </CSSTransition>\r\n  );\r\n\r\n  return (\r\n    <div key={areaKey} className={`area ${areaClassName}-area`}>\r\n      <div className={\"area-title\"}>\r\n        <h2 className=\"title-text\">{data.name}</h2>\r\n        <button onClick={() => add(areaKey)}><PlusSquare/></button>\r\n      </div>\r\n      <div className={\"area-content\"}>\r\n        <Droppable key={areaKey} droppableId={areaKey} >\r\n          { (provided, snapshot) => (\r\n            <div className={\"area-droppable\" + (snapshot.isDraggingOver ? \" dragging-over\" : \"\")} {...provided.droppableProps} ref={provided.innerRef}>\r\n              <TransitionGroup component={null}>\r\n                {todos}\r\n              </TransitionGroup>\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Area;","import React from 'react';\r\nimport usePersistedState from '../hooks/usePersistedState';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { onDragEnd } from '../utils/drag';\r\nimport { generateId } from '../utils/idgenerator';\r\nimport { initializeData } from '../utils/initData';\r\n\r\nimport Area from './Area';\r\n\r\nimport './Platform.css';\r\n\r\n\r\nfunction Platform() {\r\n  const [areas, setAreas] = usePersistedState(\"areaList\", initializeData);\r\n\r\n  const addTodo = (key) => {\r\n    const newTodo = { id: generateId(), text: \"\"}\r\n    let area = areas[key];\r\n    console.log(\"\")\r\n    area.items.push(newTodo);\r\n    // TODO: Need to change that only items array is set, not whole area object\r\n    const newObj = { ...areas, [key]: area };\r\n    setAreas(newObj);\r\n  }\r\n\r\n  const removeTodo = (key, index) => {\r\n    let area = areas[key];\r\n    area.items.splice(index, 1);\r\n    // TODO: Need to change that only items array is set, not whole area object\r\n    const newObj = { ...areas, [key]: area };\r\n    setAreas(newObj);\r\n  }\r\n\r\n  const changeTodo = (key, index, text) => {\r\n    let area = areas[key];\r\n    area.items[index].text = text;\r\n    const newObj = { ...areas, [key]: area}\r\n    setAreas(newObj);\r\n  }\r\n\r\n  const areaComponents = Object.entries(areas).map(([areaKey, area], index) =>\r\n    <Area key={areaKey} areaKey={areaKey} data={area} add={addTodo} change={changeTodo} remove={removeTodo} />\r\n  );\r\n\r\n  return (\r\n    <div className=\"platform\">\r\n        \r\n        <div className=\"label urgent\">Urgent</div>\r\n        <div className=\"label not-urgent\">Not urgent</div>\r\n        <div className=\"label important\">Important</div>\r\n        <div className=\"label not-important\">Not important</div>\r\n\r\n      <DragDropContext onDragEnd={result => onDragEnd(result, areas, setAreas)}>\r\n        {areaComponents}\r\n      </DragDropContext>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Platform;","\r\nexport const generateId = () => {\r\n  return Math.random().toString(36).substr(2, 9);\r\n}\r\n","\r\nexport const onDragEnd = (result, columns, setColumns) => {\r\n  if (!result.destination) return;\r\n  const { source, destination } = result;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumn = columns[source.droppableId];\r\n    const destColumn = columns[destination.droppableId];\r\n    const sourceItems = [...sourceColumn.items];\r\n    const destItems = [...destColumn.items];\r\n    const [removed] = sourceItems.splice(source.index, 1);\r\n    destItems.splice(destination.index, 0, removed);\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...sourceColumn,\r\n        items: sourceItems\r\n      },\r\n      [destination.droppableId]: {\r\n        ...destColumn,\r\n        items: destItems\r\n      }\r\n    });\r\n  } else {\r\n    const column = columns[source.droppableId];\r\n    const copiedItems = [...column.items];\r\n    const [removed] = copiedItems.splice(source.index, 1);\r\n    copiedItems.splice(destination.index, 0, removed);\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...column,\r\n        items: copiedItems\r\n      }\r\n    });\r\n  }\r\n};","import React from 'react';\r\nimport Platform from './components/Platform'\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Platform />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}