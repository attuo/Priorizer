{"version":3,"sources":["components/Area/AreaHeader.js","hooks/useKeyPress.js","components/Todo/Todo.js","components/Area/AreaContent.js","components/Area/Area.js","components/Platform/Platform.js","hooks/usePersistedState.js","utils/initData.js","utils/idgenerator.js","utils/drag.js","components/App/App.js","serviceWorker.js","index.js"],"names":["AreaHeader","props","areaKey","title","add","className","onClick","useKeyPress","targetKey","useState","keyPressed","setKeyPressed","downHandler","key","upHandler","useEffect","window","addEventListener","removeEventListener","Todo","data","index","change","remove","isInputActive","setIsInputActive","text","inputValue","setInputValue","inputRef","useRef","enter","useKeypress","esc","onEnter","useCallback","onEsc","current","focus","handleInputChange","event","target","value","handleSave","handleEdit","id","draggableId","provided","snapshot","isDragging","ref","innerRef","draggableProps","dragHandleProps","onChange","AreaContent","todos","droppableId","isDraggingOver","droppableProps","TransitionGroup","component","map","item","CSSTransition","classNames","timeout","exit","placeholder","Area","areaClassName","name","toLowerCase","items","Platform","initialValue","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorageState","doArea","scheduleArea","delegateArea","eliminateArea","doneArea","areas","setAreas","addTodo","newTodo","Math","random","toString","substr","area","push","newObj","removeTodo","splice","changeTodo","areaComponents","Object","entries","onDragEnd","result","columns","setColumns","destination","source","sourceColumn","destColumn","sourceItems","destItems","removed","column","copiedItems","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3c725b95.chunk.js","sourcesContent":["import React from 'react';\r\nimport { PlusSquare } from 'react-feather';\r\n\r\nimport './AreaHeader.css'\r\n\r\nfunction AreaHeader(props) {\r\n  const { areaKey, title, add } = props;\r\n  \r\n  return (\r\n    <div className={\"area-title\"}>\r\n      <h2 className=\"title-text\">{title}</h2>\r\n      <button onClick={() => add(areaKey)}><PlusSquare/></button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AreaHeader;","// From https://usehooks.com/useKeyPress/\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction useKeyPress(targetKey) {\r\n  // State for keeping track of whether key is pressed\r\n  const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n  // If pressed key is our target key then set to true\r\n  function downHandler({ key }) {\r\n    if (key === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  }\r\n\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key }) => {\r\n    if (key === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", downHandler);\r\n    window.addEventListener(\"keyup\", upHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", downHandler);\r\n      window.removeEventListener(\"keyup\", upHandler);\r\n    };\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return keyPressed;\r\n}\r\n\r\nexport default useKeyPress;\r\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { Edit, CheckSquare, XSquare } from 'react-feather';\r\nimport useKeypress from \"../../hooks/useKeyPress\";\r\n\r\nimport './Todo.css'\r\n\r\nfunction Todo(props) {\r\n  // TODO: Don't render all the changes all the time\r\n  const { data, areaKey, index, change, remove } = props;\r\n\r\n  const [isInputActive, setIsInputActive] = useState(false);\r\n  const [inputValue, setInputValue] = useState(data.text);\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  const enter = useKeypress(\"Enter\");\r\n  const esc = useKeypress(\"Escape\");\r\n\r\n  const onEnter = useCallback(() => {\r\n    if (enter) {\r\n      change(areaKey, index, inputValue);\r\n      setIsInputActive(false);\r\n    }\r\n  }, [enter, inputValue, change]);\r\n\r\n  const onEsc = useCallback(() => {\r\n    if (esc) {\r\n      setInputValue(data.text);\r\n      setIsInputActive(false);\r\n    }\r\n  }, [esc, data.text]);\r\n\r\n  // focus the cursor when edit is active\r\n  useEffect(() => {\r\n    if (isInputActive) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isInputActive]);\r\n\r\n  useEffect(() => {\r\n    if (isInputActive) {\r\n      onEnter(); // save text changes \r\n      onEsc(); // revert text changes\r\n    }\r\n  }, [onEnter, onEsc, isInputActive]); // watch the Enter and Escape key presses\r\n\r\n  const handleInputChange = useCallback(\r\n    (event) => {\r\n      // TODO: Sanitize input\r\n      setInputValue(event.target.value);\r\n    },\r\n    [setInputValue]\r\n  );\r\n\r\n  const handleSave = () => {\r\n    change(areaKey, index, inputValue);\r\n    setIsInputActive(false);\r\n  }\r\n\r\n  const handleEdit = () => {\r\n    setIsInputActive(true);\r\n  }\r\n\r\n  return(\r\n    <Draggable key={data.id} draggableId={data.id} index={index}>\r\n      {(provided, snapshot) => \r\n        <div\r\n          className={`todo ${snapshot.isDragging ? \" active\" : \"\"} ${isInputActive ? \" active\": \"\"}`}\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <div className=\"text-section\">\r\n            { isInputActive ? \r\n              <textarea\r\n                className=\"text-input\"\r\n                ref={inputRef}\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n              />\r\n              :\r\n              <span className=\"text-input\">\r\n                {data.text}\r\n              </span>\r\n            }  \r\n          </div>\r\n          <div className=\"button-section\">\r\n            { isInputActive ?\r\n              <button className=\"action-button save-button\" onClick={handleSave}><CheckSquare/></button>\r\n            :\r\n              <button className=\"action-button edit-button\" onClick={handleEdit}><Edit/></button>\r\n            }\r\n            <button className=\"action-button remove-button\" onClick={() => remove(areaKey, index)}><XSquare /></button>\r\n          </div>\r\n        </div>\r\n      }\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport Todo from '../Todo/Todo';\r\n\r\nimport './AreaContent.css'\r\n\r\nfunction AreaContent(props) {\r\n  const { areaKey, todos, change, remove } = props;\r\n\r\n  return (\r\n    <div className={\"area-content\"}>\r\n\r\n      <Droppable key={areaKey} droppableId={areaKey} >\r\n        { (provided, snapshot) => (\r\n          \r\n          <div className={\"area-droppable\" + (snapshot.isDraggingOver ? \" dragging-over\" : \"\")} {...provided.droppableProps} ref={provided.innerRef}>\r\n            <TransitionGroup component={null}>\r\n              \r\n            { todos.map((item, index) =>\r\n              <CSSTransition key={item.id} classNames=\"item\" timeout={300} exit={false}>\r\n                <Todo areaKey={areaKey} key={item.id} data={item} index={index} change={change} remove={remove} />\r\n              </CSSTransition>)\r\n            }\r\n\r\n            </TransitionGroup>\r\n            {provided.placeholder}\r\n          </div>\r\n\r\n        )}\r\n      </Droppable>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AreaContent;","import React from 'react';\r\n\r\nimport AreaHeader from './AreaHeader'\r\nimport AreaContent from './AreaContent';\r\n\r\nimport './Area.css'\r\n\r\nfunction Area(props) {\r\n  const { data, areaKey, add, change, remove } = props;\r\n  const areaClassName = data.name.toLowerCase(); \r\n\r\n  return (\r\n    <div key={areaKey} className={`area ${areaClassName}-area`}>\r\n      \r\n      <AreaHeader areaKey={areaKey} title={data.name} add={add} />\r\n      <AreaContent areaKey={areaKey} todos={data.items} change={change} remove={remove}/>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Area;","import React from 'react';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { onDragEnd } from '../../utils/drag';\r\nimport { generateId } from '../../utils/idgenerator';\r\nimport { initializeData } from '../../utils/initData';\r\nimport useLocalStorageState from '../../hooks/usePersistedState';\r\n\r\nimport Area from '../Area/Area';\r\n\r\nimport './Platform.css';\r\n\r\n\r\nfunction Platform() {\r\n  const [areas, setAreas] = useLocalStorageState(\"areaList\", initializeData());\r\n\r\n  const addTodo = (key) => {\r\n    const newTodo = { id: generateId(), text: \"\"}\r\n    let area = areas[key];\r\n    area.items.push(newTodo);\r\n    // TODO: Need to change that only items array is set, not whole area object\r\n    const newObj = { ...areas, [key]: area };\r\n    setAreas(newObj);\r\n  }\r\n\r\n  const removeTodo = (key, index) => {\r\n    let area = areas[key];\r\n    area.items.splice(index, 1);\r\n    // TODO: Need to change that only items array is set, not whole area object\r\n    const newObj = { ...areas, [key]: area };\r\n    setAreas(newObj);\r\n  }\r\n\r\n  const changeTodo = (key, index, text) => {\r\n    let area = areas[key];\r\n    area.items[index].text = text;\r\n    const newObj = { ...areas, [key]: area}\r\n    setAreas(newObj);\r\n  }\r\n\r\n  const areaComponents = Object.entries(areas).map(([areaKey, area], index) =>\r\n    <Area key={areaKey} areaKey={areaKey} data={area} add={addTodo} change={changeTodo} remove={removeTodo} />\r\n  );\r\n\r\n  return (\r\n    <div className=\"platform\">\r\n        \r\n        <div className=\"label urgent\">Urgent</div>\r\n        <div className=\"label not-urgent\">Not urgent</div>\r\n        <div className=\"label important\">Important</div>\r\n        <div className=\"label not-important\">Not important</div>\r\n\r\n      <DragDropContext onDragEnd={result => onDragEnd(result, areas, setAreas)}>\r\n        {areaComponents}\r\n      </DragDropContext>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Platform;","\r\n// https://usehooks.com/useLocalStorage/\r\nimport { useState } from 'react';\r\n\r\nexport default function useLocalStorageState(key, initialValue) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = value => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useStat\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n  return [storedValue, setValue];\r\n}","export const initializeData = () => ({\r\n  doArea: {\r\n      name: \"Do\",\r\n      items: []\r\n    },\r\n    scheduleArea: {\r\n      name: \"Schedule\",\r\n      items: []\r\n    },\r\n    delegateArea: {\r\n      name: \"Delegate\",\r\n      items: []\r\n    },\r\n    eliminateArea: {\r\n      name: \"Eliminate\",\r\n      items: []\r\n    },\r\n    doneArea: {\r\n      name: \"Done\",\r\n      items: []\r\n    }\r\n})","\r\nexport const generateId = () => {\r\n  return Math.random().toString(36).substr(2, 9);\r\n}\r\n","\r\nexport const onDragEnd = (result, columns, setColumns) => {\r\n  if (!result.destination) return;\r\n  const { source, destination } = result;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumn = columns[source.droppableId];\r\n    const destColumn = columns[destination.droppableId];\r\n    const sourceItems = [...sourceColumn.items];\r\n    const destItems = [...destColumn.items];\r\n    const [removed] = sourceItems.splice(source.index, 1);\r\n    destItems.splice(destination.index, 0, removed);\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...sourceColumn,\r\n        items: sourceItems\r\n      },\r\n      [destination.droppableId]: {\r\n        ...destColumn,\r\n        items: destItems\r\n      }\r\n    });\r\n  } else {\r\n    const column = columns[source.droppableId];\r\n    const copiedItems = [...column.items];\r\n    const [removed] = copiedItems.splice(source.index, 1);\r\n    copiedItems.splice(destination.index, 0, removed);\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...column,\r\n        items: copiedItems\r\n      }\r\n    });\r\n  }\r\n};","import React from 'react';\r\nimport Platform from '../Platform/Platform'\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Platform />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}